{"version":3,"sources":["components/Editable.js","components/Card.js","components/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Editable","text","children","useState","isEditing","setEditing","onBlur","onKeyDown","e","event","key","indexOf","handleKeyDown","onClick","Card","cardTitle","setCardTitle","cardDesc","setCardDesc","className","type","name","value","onChange","target","rows","parentNode","remove","Dashboard","title","setTitle","cards","setCards","length","Date","getTime","alert","App","dashboard","setdashboard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0KAgCeA,MA9Bf,YAAuC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAAY,EACJC,oBAAS,GADL,mBAC7BC,EAD6B,KAClBC,EADkB,KAYpC,OACE,8BACGD,EACC,qBACEE,OAAQ,kBAAMD,GAAW,IACzBE,UAAW,SAACC,GAAD,OAdG,SAACC,GAAW,IACxBC,EAAQD,EAARC,IACK,CAAC,SAAU,SAEfC,QAAQD,IAAQ,GACvBL,GAAW,GASWO,CAAcJ,IAFlC,SAIGN,IAGH,qBAAKW,QAAS,kBAAMR,GAAW,IAA/B,SACE,+BAAOJ,SCgBFa,MAtCf,WAAiB,IAAD,EACoBX,mBAAS,aAD7B,mBACPY,EADO,KACIC,EADJ,OAEkBb,mBAAS,qBAF3B,mBAEPc,EAFO,KAEGC,EAFH,KAId,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,CAAUlB,KAAMc,EAAhB,SACE,uBACEI,UAAU,aACVC,KAAK,OACLC,KAAK,QACLC,MAAOP,EACPQ,SAAU,SAACf,GAAD,OAAOQ,EAAaR,EAAEgB,OAAOF,cAI7C,qBAAKH,UAAU,cAAf,SACE,cAAC,EAAD,CAAUlB,KAAMgB,EAAhB,SACE,0BACEE,UAAU,oBACVM,KAAK,IACLJ,KAAK,OACLC,MAAOL,EACPM,SAAU,SAACf,GAAD,OAAOU,EAAYV,EAAEgB,OAAOF,cAI5C,wBACEH,UAAU,WACVN,QAAS,SAACL,GAAD,OAAOA,EAAEgB,OAAOE,WAAWC,UAFtC,mBCMSC,MAjCf,WAAsB,IAAD,EACOzB,mBAAS,sBADhB,mBACZ0B,EADY,KACLC,EADK,OAEO3B,mBAAS,IAFhB,mBAEZ4B,EAFY,KAELC,EAFK,KAInB,OACE,sBAAKb,UAAU,YAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,cAAC,EAAD,CAAUlB,KAAM4B,EAAhB,SACE,uBACEV,UAAU,aACVC,KAAK,OACLC,KAAK,QACLC,MAAOO,EACPN,SAAU,SAACf,GAAD,OAAOsB,EAAStB,EAAEgB,OAAOF,cAIzC,wBACEH,UAAU,kBAEVN,QAAS,kBACPkB,EAAME,OAAS,EACXD,EAAS,GAAD,mBAAKD,GAAL,CAAY,cAAC,EAAD,IAAW,IAAIG,MAAOC,cAC1CC,MAAM,gCANd,6BAWCL,MCNQM,MAtBf,WAAgB,IAAD,EACqBlC,mBAAS,IAD9B,mBACNmC,EADM,KACKC,EADL,KAGb,OACE,sBAAKpB,UAAU,OAAf,UACE,0CACA,0CACA,cAAC,EAAD,IACCmB,EACD,qBAAKnB,UAAU,gBAAf,SACE,wBAAQA,UAAU,UAChBN,QAAS,kBACP0B,EAAa,GAAD,mBAAKD,GAAL,CAAgB,cAAC,EAAD,IAAgB,IAAIJ,MAAOC,eAF3D,qBCFOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8a4da244.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Editable({ text, children }) {\r\n  const [isEditing, setEditing] = useState(false);\r\n\r\n  const handleKeyDown = (event) => {\r\n    const { key } = event;\r\n    const keys = [\"Escape\", \"Enter\"];\r\n\r\n    if (keys.indexOf(key) > -1) {\r\n      setEditing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isEditing ? (\r\n        <div\r\n          onBlur={() => setEditing(false)}\r\n          onKeyDown={(e) => handleKeyDown(e)}\r\n        >\r\n          {children}\r\n        </div>\r\n      ) : (\r\n        <div onClick={() => setEditing(true)}>\r\n          <span>{text}</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Editable;\r\n","import React, { useState } from \"react\";\r\nimport Editable from \"./Editable\";\r\n\r\nfunction Card() {\r\n  const [cardTitle, setCardTitle] = useState(\"Card Name\");\r\n  const [cardDesc, setCardDesc] = useState(\"Write description\");\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-name\">\r\n        <Editable text={cardTitle}>\r\n          <input\r\n            className=\"card-input\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={cardTitle}\r\n            onChange={(e) => setCardTitle(e.target.value)}\r\n          />\r\n        </Editable>\r\n      </div>\r\n      <div className=\"description\">\r\n        <Editable text={cardDesc}>\r\n          <textarea\r\n            className=\"description-input\"\r\n            rows=\"4\"\r\n            name=\"desc\"\r\n            value={cardDesc}\r\n            onChange={(e) => setCardDesc(e.target.value)}\r\n          />\r\n        </Editable>\r\n      </div>\r\n      <button\r\n        className=\"card-btn\"\r\n        onClick={(e) => e.target.parentNode.remove()}\r\n      >\r\n        X\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState } from \"react\";\r\nimport Editable from \"./Editable\";\r\nimport Card from \"./Card\";\r\n\r\nfunction Dashboard() {\r\n  const [title, setTitle] = useState(\"Untitled Dashboard\");\r\n  const [cards, setCards] = useState([]);\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"dashboard-name\">\r\n        <Editable text={title}>\r\n          <input\r\n            className=\"dash-input\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Editable>\r\n      </div>\r\n      <button\r\n        className=\"create-card-btn\"\r\n        // Placeholder solution for testing\r\n        onClick={() =>\r\n          cards.length < 6\r\n            ? setCards([...cards, <Card key={new Date().getTime()} />])\r\n            : alert(\"Reached max number of cards\")\r\n        }\r\n      >\r\n        Create New Card\r\n      </button>\r\n      {cards}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React, { useState } from \"react\";\r\nimport \"./sass/main.scss\";\r\nimport Dashboard from \"./components/Dashboard\";\r\n\r\nfunction App() {\r\n  const [dashboard, setdashboard] = useState([]);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <h1>Todo App</h1>\r\n      <h2>Team - 7</h2>\r\n      <Dashboard />\r\n      {dashboard}\r\n      <div className=\"add-container\">\r\n        <button className=\"add-btn\"\r\n          onClick={() =>\r\n            setdashboard([...dashboard, <Dashboard key={new Date().getTime()} />])\r\n          }\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./sass/main.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}